#include<stdio.h>
using namespace std;
int pc1[]={   57,   49,    41,   33,    25,    17,    9,
               1,   58,    50,   42,    34,    26,   18,
              10,    2,    59,   51,    43,    35,   27,
              19,   11,     3,   60,    52,    44,   36,
              63,   55,    47,   39,    31,    23,   15,
               7,   62,    54,   46,    38,    30,   22,
              14,    6,    61,   53,    45,    37,   29,
              21,   13,     5,   28,    20,    12,    4   };

int pc2[]={      14,    17,   11,    24,     1,    5,
                  3,    28,   15,     6,    21,   10,
                 23,    19,   12,     4,    26,    8,
                 16,     7,   27,    20,    13,    2,
                 41,    52,   31,    37,    47,   55,
                 30,    40,   51,    45,    33,   48,
                 44,    49,   39,    56,    34,   53,
                 46,    42,   50,    36,    29,   32    
           };

int noIterate[] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
int keyGenerated[16][48];
int key[64];
int temp[64];
char inputKey[66];
int Co[28];
int Do[28];


int ip[64] = {
            58,    50,   42,    34,    26,   18,    10,    2,
            60,    52,   44,    36,    28,   20,    12,    4,
            62,    54,   46,    38,    30,   22,    14,    6,
            64,    56,   48,    40,    32,   24,    16,    8,
            57,    49,   41,    33,    25,   17,     9,    1,
            59,    51,   43,    35,    27,   19,    11,    3,
            61,    53,   45,    37,    29,   21,    13,    5,
            63,    55,   47,    39,    31,   23,    15,    7
           };  

int Etable[48] = 
            {
            	 32,     1,    2,     3,     4,    5,
                  4,     5,    6,     7,     8,    9,
                  8,     9,   10,    11,    12,   13,
                 12,    13,   14,    15,    16,   17,
                 16,    17,   18,    19,    20,   21,
                 20,    21,   22,    23,    24,   25,
                 24,    25,   26,    27,    28,   29,
                 28,    29,   30,    31,    32,    1
            };

int sTable[8][4][16] = {
	{
	  { 14,  4,  13,  1,   2, 15,  11,  8,   3, 10,   6, 12,   5,  9,   0,  7 },
          {  0, 15,   7,  4,  14,  2,  13,  1,  10,  6,  12, 11,   9,  5,   3,  8 },
          {  4,  1,  14,  8,  13,  6,   2, 11,  15, 12,   9,  7,   3, 10,   5,  0 },
          { 15, 12,   8,  2,   4,  9,   1,  7,   5, 11,   3, 14,  10,  0,   6, 13 }
             },
             
       {
	 { 15,  1,   8, 14,   6, 11,   3,  4,   9,  7,   2, 13,  12,  0,   5, 10 },
         {  3, 13,   4,  7,  15,  2,   8, 14,  12,  0,   1, 10,   6,  9,  11,  5},
         {  0, 14,   7, 11,  10,  4,  13,  1,   5,  8,  12,  6,   9,  3,   2, 15},
         { 13,  8,  10,  1,   3, 15,   4,  2,  11,  6,   7, 12,   0,  5,  14,  9}
            },
       {
         { 10,  0,   9, 14,   6,  3,  15,  5,   1, 13,  12,  7,  11,  4,   2,  8},
         { 13,  7,   0,  9,   3,  4,   6, 10,   2,  8,   5, 14,  12, 11,  15,  1},
         { 13,  6,   4,  9,   8, 15,   3,  0,  11,  1,   2, 12,   5, 10,  14,  7},
         {  1, 10,  13,  0,   6,  9,   8,  7,   4, 15,  14,  3,  11,  5,   2, 12}     	
	    },
			 
       {
	 {  7, 13,  14,  3,   0,  6,   9, 10,   1,  2,   8,  5,  11, 12,   4, 15},
         { 13,  8,  11,  5,   6, 15,   0,  3,   4,  7,   2, 12,   1, 10,  14,  9},
         { 10,  6,   9,  0,  12, 11,   7, 13,  15,  1,   3, 14,   5,  2,   8,  4},
         {  3, 15,   0,  6,  10,  1,  13,  8,   9,  4,   5, 11,  12,  7,   2, 14}
	    },
	
       {
         {  2, 12,   4,  1,   7, 10,  11,  6,   8,  5,   3, 15,  13,  0,  14,  9},
         { 14, 11,   2, 12,   4,  7,  13,  1,   5,  0,  15, 10,   3,  9,   8,  6},
         {  4,  2,   1, 11,  10, 13,   7,  8,  15,  9,  12,  5,   6,  3,   0, 14},
         { 11,  8,  12,  7,   1, 14,   2, 13,   6, 15,   0,  9,  10,  4,   5,  3}
	    },
	
       {
	 { 12,  1,  10, 15,   9,  2,   6,  8,   0, 13,   3,  4,  14,  7,   5, 11},
         { 10, 15,   4,  2,   7, 12,   9,  5,   6,  1,  13, 14,   0, 11,   3,  8},
         {  9, 14,  15,  5,   2,  8,  12,  3,   7,  0,   4, 10,   1, 13,  11,  6},
         {  4,  3,   2, 12,   9,  5,  15, 10,  11, 14,   1,  7,   6,  0,   8, 13 }
	    },
       
       {
	 {  4, 11,   2, 14,  15,  0,   8, 13,   3, 12,   9,  7,   5, 10,   6,  1},
         { 13,  0,  11,  7,   4,  9,   1, 10,  14,  3,   5, 12,   2, 15,   8,  6},
         {  1,  4,  11, 13,  12,  3,   7, 14,  10, 15,   6,  8,   0,  5,   9,  2},
         {  6, 11,  13,  8,   1,  4,  10,  7,   9,  5,   0, 15,  14,  2,   3, 12}
	    },
 
       {
	 { 13,  2,   8,  4,   6, 15,  11,  1,  10,  9,   3, 14,   5,  0,  12,  7},
         {  1, 15,  13,  8,  10,  3,   7,  4,  12,  5,   6, 11,   0, 14,   9,  2},
         {  7, 11,   4,  1,   9, 12,  14,  2,   0,  6,  10, 13,  15,  3,   5,  8},
         {  2,  1,  14,  7,   4, 10,   8, 13,  15, 12,   9,  0,   3,  5,   6, 11}
	    }
 };
int DtoB[16][4] = { {0,0,0,0},
                    {0,0,0,1},
                    {0,0,1,0},
                    {0,0,1,1},
                    {0,1,0,0},
                    {0,1,0,1},
                    {0,1,1,0},
                    {0,1,1,1},
                    {1,0,0,0},
                    {1,0,0,1},
                    {1,0,1,0},
                    {1,0,1,1},
                    {1,1,0,0},
                    {1,1,0,1},
                    {1,1,1,0},
                    {1,1,1,1}  };

int pTable[32] = {
	                     16,   7,  20,  21,
                         29,  12,  28,  17,
                          1,  15,  23,  26,
                          5,  18,  31,  10,
                          2,   8,  24,  14,
                         32,  27,   3,   9,
                         19,  13,  30,   6,
                         22,  11,   4,  25
               };
  
int ipInverse[64] = {
	        40,     8,   48,    16,    56,   24,    64,   32,
            39,     7,   47,    15,    55,   23,    63,   31,
            38,     6,   46,    14,    54,   22,    62,   30,
            37,     5,   45,    13,    53,   21,    61,   29,
            36,     4,   44,    12,    52,   20,    60,   28,
            35,     3,   43,    11,    51,   19,    59,   27,
            34,     2,   42,    10,    50,   18,    58,   26,
            33,     1,   41,     9,    49,   17,    57,   25
               };
char inputPT[66];
int PT[64];
int tempPT[64];
int tempPT1[32];
int Lo[2][32];
int Ro[2][32];
int encryptedPT[64];
void rotate(int no)
{
	int i,j;
	for(j=0;j<no;j++)
	{
		int t = temp[0];
		for(i=0;i<=26;i++)
		{
			temp[i] = temp[i+1];
		}
		temp[27] = t;
		
		t = temp[28];
		for(i=28;i<=54;i++)
		{
			temp[i] = temp[i+1];
		}
		temp[55] = t;
	
    }
}
int main()
{
  
  printf("enter the key\n");
  scanf("%s",inputKey);
  int i,j;
  for(i=0;i<64;i++)
  {
  key[i]=inputKey[i]-'0';
  temp[i]=key[i];
  }
  
  //Converting 64 bit to 56 bit by passing through PC1
  for(i=0;i<56;i++)
  {
  	temp[i] = key[pc1[i]-1];
  	if(i<28)
  	Do[i] = temp[i];
  	else
  	Co[i-28] = temp[i];
  }
  
  // Co is 28th index to 55th index  and Do is 0th index to 27th index
  for(i=0;i<16;i++)
  {
  	//Performing left shift on 28th bit left and right halves
    rotate(noIterate[i]);
    
    //Converting this 56bit to 48bit by passing through PC2
    for(j=0;j<48;j++)
    {
    	keyGenerated[i][j] = temp[pc2[j]-1];
	}
  }  
  
  for(i=0;i<16;i++)
  {
  	for(j=0;j<48;j++)
  	printf("%d ",keyGenerated[i][j]);
  	printf("\n");
  }
  
  printf("enter the plain text\n");
  scanf("%s",inputPT);
  
  for(i=0;i<64;i++)
  {
  	PT[i] = inputPT[i]-'0';
  }
//Initial permutation of plain text by passing it through IP
  for(i=0;i<64;i++)
  {
  	inputPT[i] = PT[ip[i]-1];
  	if(i<32)
  	Lo[0][i] = inputPT[i];
  	else
  	Ro[0][i-32] = inputPT[i];
  }
  
  
  for(i=0;i<16;i++)
  {
  	for(j=0;j<32;j++)
  	Lo[1][j] = Ro[0][j];
  	
  	//Expanding 32bit to 48bit
    for(j=0;j<48;j++)  
    tempPT[j] = Ro[0][Etable[j]-1];
    
    //Xor of Ro with key generated in ith round
    for(j=0;j<48;j++)
    {
    tempPT[j] = (tempPT[j] == keyGenerated[i][j]) ? 0:1 ;
    }
    
    //Collapsing 48bit to 32bit S-box operation
    for(j=0;j<8;j++)
    {
    		int start = j*6;
    		int end = start+5;
    		int row = 2*tempPT[start]+tempPT[end];
    		int col = 8*tempPT[start+1] + 4*tempPT[start+2] + 2*tempPT[start+3] + tempPT[start+4];
    		int no = sTable[j][row][col];
    		int k;
    		for(k=0;k<4;k++)
    		{
    			tempPT[j*4+k] = DtoB[no][k];
			}
	}
    
    for(j=0;j<32;j++)
    {
    	tempPT1[j] = tempPT[pTable[j]-1];
	}
    
    for(j=0;j<32;j++)
    Ro[1][j] = Lo[0][j] ^ tempPT1[j];
    
    for(j=0;j<32;j++)	
    {
     Lo[0][j] = Lo[1][j];
     Ro[0][j] = Ro[1][j];
	}
  }
  
  for(i=0;i<64;i++)
  {
  	if(i<32)
  	tempPT[i] = Ro[0][i];
  	else
  	tempPT[i] = Lo[0][i-32];
  }
  
  //passing through ip inverse table
  for(i=0;i<64;i++)
  {
  	encryptedPT[ ipInverse[i]-1 ] = tempPT[i];
  }
  
  printf("\n Encrypted message: \n");
  for(i=0;i<64;i++)
  printf("%d",encryptedPT[i]);
  
  printf("\n");
}
